buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.12.0'
    }
}

plugins {
    id 'nebula.optional-base' version '3.0.3'
    id 'nebula.provided-base' version '3.0.3'

    id 'org.ajoberstar.grgit' version '1.3.2'
    id 'org.ajoberstar.release-opinion' version '1.3.2'

    id "com.ewerk.gradle.plugins.querydsl" version "1.0.5"
    id "org.flywaydb.flyway" version "3.2"

    id 'org.hidetake.ssh' version '1.2.0'
    id 'java'
    id 'application'
}

description = 'AlertMed :: Web application'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    jcenter()
}

ext {
    git = org.ajoberstar.grgit.Grgit.open(project.rootDir)
    revision = git.head().id
    shortMessage = git.head().shortMessage

    lombokVersion = '1.16.6'
    vertxVersion = '3.2.1'
    queryDslVersion = '3.7.1'
    jacksonVersion = '2.6.3'
    guavaVersion = '18.0'
    hibernateVersion = '5.0.7.Final'
    hibernateValidatorVersion = '5.2.2.Final'
    log4jVersion = '2.5'
    slf4jVersion = '1.7.15'
    postgresqlVersion = '9.4-1201-jdbc41'
    flywayVersion = '3.2.1'
    springVersion = '4.1.9.RELEASE'
    springDataVersion = '1.9.2.RELEASE'
    katharsisVersion = '2.2.1-1.devlabel'
    reflectionsVersion = '0.9.10'

    nodeVersion = '4.3.1'
    npmVersion = '2.14.12'
}

// In this section you declare the dependencies for your production and test code
dependencies {
    provided "org.projectlombok:lombok:${lombokVersion}"

    compile "com.google.guava:guava:${guavaVersion}"

    compile "org.slf4j:slf4j-api:${slf4jVersion}"
    compile "org.apache.logging.log4j:log4j-slf4j-impl:${log4jVersion}"
    compile "org.apache.logging.log4j:log4j-core:${log4jVersion}"
    compile "org.apache.logging.log4j:log4j-api:${log4jVersion}"

    compile "io.vertx:vertx-core:${vertxVersion}"
    compile "io.vertx:vertx-web-templ-thymeleaf:${vertxVersion}"
    compile 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect:1.3.3'

    compile 'com.github.rworsnop:vertx-beans:1.2.1'

    compile "io.vertx:vertx-auth-shiro:${vertxVersion}"

    compile "org.flywaydb:flyway-core:${flywayVersion}"
    compile "org.springframework.data:spring-data-jpa:${springDataVersion}"
    compile "org.hibernate:hibernate-entitymanager:${hibernateVersion}"
    compile "org.hibernate:hibernate-core:${hibernateVersion}"
    runtime "javax.transaction:jta:1.1"
    compile "org.hibernate:hibernate-validator:${hibernateValidatorVersion}"

    compile "com.mysema.querydsl:querydsl-jpa:${queryDslVersion}"

    compile "org.apache.commons:commons-dbcp2:2.1.1"
    compile "org.postgresql:postgresql:${postgresqlVersion}"

    compile "javax.el:javax.el-api:2.2.4"
    compile "org.glassfish.web:javax.el:2.2.4"

    compile "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
    compile "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:${jacksonVersion}"

    testCompile "junit:junit:4.12"
}

querydsl {
    library = "com.mysema.querydsl:querydsl-apt:${queryDslVersion}"
    jpa = true
    querydslSourcesDir = "src/querydsl/java"
}

//flyway {
//    driver = 'org.postgresql.Driver'
//    url = 'jdbc:postgresql://127.0.0.1/alertmed-itest'
//    user = 'itest'
//    password = 'itest'
//    baselineOnMigrate = true
//    baselineVersion = '1.0.0'
//    baselineDescription = "Let's go!"
//    locations = ['filesystem:sql']
//}

release {
    grgit = git
}

distZip.enabled = false

distTar {
    compression Compression.GZIP
    extension 'tar.gz'
}

mainClassName = 'alertmed.Main'

distributions {
    main {
        contents {

            from(rootProject.projectDir) {
                include 'VERSION'
                expand(
                        buildDate: new Date(),
//                         Use revision with Git commit id:
                        revision: revision,
                        version: project.version,
                        appName: applicationName,
                        shortMessage: shortMessage
                )

            }

            from(fileTree("$rootProject.projectDir/templates")) {
                into 'templates'
            }


            from('sql') {
                into 'sql'
            }

            from(fileTree('bower_components')) {
                into 'webroot/components'
            }

        }
    }
}

ssh.settings {
    knownHosts = allowAnyHosts
}

remotes {
    def knownHosts = "${System.getProperty("user.home")}/.ssh/known_hosts"
    def sshKey = "${System.getProperty("user.home")}/.ssh/id_rsa"

    webServer {
        host = 'netdava.com'
        user = 'ieugen'
        agent = true
        identity = file(sshKey)
    }
}


def targz = distTar.outputs.files.singleFile.name
def deployName = targz.minus('.tar.gz')

println deployName

task upload(dependsOn: 'build') << {

    ssh.run {
        session(remotes.webServer) {
            put distTar.outputs.files.singleFile, '/opt/alertmed/releases'
        }
    }
}

task unpack << {

    ssh.run {
        session(remotes.webServer) {
            execute "tar -xf /opt/alertmed/releases/${targz} -C /opt/alertmed/releases/"
            execute "rm -f /opt/alertmed/releases/${targz}"
            execute "rm -f /opt/alertmed/current && ln -s /opt/alertmed/releases/${deployName} /opt/alertmed/current"
        }
    }
}

task restart << {

    ssh.run {
        session(remotes.webServer) {
            execute "sudo /bin/systemctl restart alertmed.service", pty: true
        }
    }
}

upload.mustRunAfter build
unpack.mustRunAfter upload
restart.mustRunAfter unpack

task deploy(dependsOn: ['build', 'upload', 'unpack', 'restart'])
